
module Collar
  module Prelude
    PRELUDE = %Q{
use duktape
import structs/HashMap

DUK_PROTO_CACHE := HashMap<Class, String> new()
DUK_ID_SEED := 2424

extend DukContext {
    freshID: static func -> String {
      DUK_ID_SEED += 1
      "_duk_seeded_" + DUK_ID_SEED
    }

    setInheritance: func (child, parent: String) {
      getGlobalString(child)
      getGlobalString(parent)
      if (isUndefined(-1) || isUndefined(-2)) {
        \"Can't set up inheritance \#{child} => \#{parent}\" println()
      } else {
        setPrototype(-2)
      }
      pop()
    }

    requireOoc: func (index: Int) -> Object {
        getPropString(index, "pointer")
        res := requirePointer(-1)
        pop()
        res
    }

    pushOoc: func (obj: Object)  {
        objIdx := pushObject()
        clazz := obj class
        protoName := DUK_PROTO_CACHE get(clazz)

        if (!protoName) {
            raise("No duk bindings for " + (clazz name))
        }

        getGlobalString(protoName)
        setPrototype(objIdx)

        pushPointer(obj)
        putPropString(objIdx, "pointer")
    }
}

    }
  end

  AUTOGEN_NOTICE = %Q{
// Code auto-generated by Collar v#{Collar::VERSION}, don't edit by hand!
// Or, you know, do. But don't cry if it's overwritten.
// https://github.com/fasterthanlime/collar
}
end
